package com.sarudr.openaiservice.openaicilent;

import org.springframework.beans.factory.ObjectFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.openfeign.support.ResponseEntityDecoder;
import org.springframework.cloud.openfeign.support.SpringDecoder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.stereotype.Indexed;

import com.fasterxml.jackson.databind.ObjectMapper;

import feign.Logger;
import feign.Request;
import feign.RequestInterceptor;
import feign.Retryer;
import feign.codec.Decoder;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;

@Configuration
@ConfigurationProperties
@Indexed
@Data
@Slf4j
public class OpenAIClientConfig {

	@Value("${openai-service.http-client.read-timeout}")
	private int readTimeout;

	@Value("${openai-service.http-client.connect-timeout}")
	private int connectTimeout;

	@Value("${openai-service.api-key}")
	private String apiKey;

	@Value("${openai-service.gpt-model}")
	private String model;

	@Value("${openai-service.audio-model}")
	private String audioModel;

	@Bean
	public Request.Options options() {
		return new Request.Options(getConnectTimeout(), getReadTimeout());
	}

	@Bean
	public Logger.Level feignLogger() {
		return Logger.Level.FULL;
	}

	@Bean
	public Retryer retryer() {
		return new Retryer.Default();
	}

	@Bean
	public RequestInterceptor apiKeyInterceptor() {
		return request -> request.header("Authorization", "Bearer " + apiKey);
	}
	@Bean
    public HttpMessageConverter<?> customJackson2HttpMessageConverter() {
        return new MappingJackson2HttpMessageConverter();
    }

    @Bean
    public feign.codec.Decoder feignDecoder() {
    	 ObjectMapper objectMapper = new ObjectMapper();
         ObjectFactory<HttpMessageConverters> objectFactory = () -> new HttpMessageConverters(new MappingJackson2HttpMessageConverter(objectMapper));
         return new ResponseEntityDecoder((Decoder) new SpringDecoder(objectFactory));
        
    }
}
